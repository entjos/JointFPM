[{"path":"https://entjos.github.io/JointFPM/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Joshua P. Entrop. Author, maintainer, copyright holder. Alessandro Gasparini. Contributor. Mark Clements. Contributor.","code":""},{"path":"https://entjos.github.io/JointFPM/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Entrop J (2023). JointFPM: Parametric Model Estimating Mean Number Events. https://github.com/entjos/JointFPM, https://entjos.github.io/JointFPM/.","code":"@Manual{,   title = {JointFPM: A Parametric Model for Estimating the Mean Number of Events},   author = {Joshua P. Entrop},   year = {2023},   note = {https://github.com/entjos/JointFPM, https://entjos.github.io/JointFPM/}, }"},{"path":"https://entjos.github.io/JointFPM/index.html","id":"description","dir":"","previous_headings":"","what":"A Parametric Model for Estimating the Mean Number of Events","title":"A Parametric Model for Estimating the Mean Number of Events","text":"package includes functions parametrically estimating mean number events presence competing events. Researchers often disregard subsequent events competing risk setting although event interest might recurrent nature, e.g. heart attacks, strokes, complications etc.. One estimate interest situation mean number events presence competing events, can estimated using functions provided package. estimation mean number events requires two steps: user need fit joint flexible parametric model using JointFPM(). fitted model object needs passed predict() order estimate mean number events. Please note package currently development might change throughout process.","code":""},{"path":"https://entjos.github.io/JointFPM/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"A Parametric Model for Estimating the Mean Number of Events","text":"installing package CRAN please use like use latest development version GitHub please use","code":"install.packages(\"JointFPM\") remotes::install_github(\"entjos/JointFPM\")"},{"path":"https://entjos.github.io/JointFPM/index.html","id":"short-example","dir":"","previous_headings":"","what":"Short Example","title":"A Parametric Model for Estimating the Mean Number of Events","text":"use dataset bladder cancer recurrences following example. dataset included survival package includes information bladder cancer patients receiving three different treatments: placebo, Pyridoxine, Thiotepa (cf. help(survival::bladder1)).order fit joint FPM first need reshape dataset stacked format, .e. observation needs one row competing event possible multiple rows recurrent event. example use data.table package data preparation. next step fit joint flexible parametric model using stacked dataset. Based model can predict mean number events different time points covariate patterns. Please note estimation confidence intervals mean number events computer intensive. following code might take minutes run machine.","code":"# Load packages library(JointFPM) library(data.table) # For data preparations  # Load bladder cancer dataset from survival package bldr_df <- as.data.table(survival::bladder1) bldr_df <- bldr_df[, .(id, treatment, start, stop, status)]  # Define dataset for competing event times bldr_ce <- bldr_df[, .SD[stop == max(stop)],                    by = id]  bldr_ce[, `:=`(ce = 1,                re = 0,                event = as.numeric(status %in% 2:3),                start = 0)]  # Define dataset for bladder cancer recurrences bldr_re <- bldr_df[,                    `:=`(ce = 0,                         re = 1,                         event = as.numeric(status == 1))]  # Combine datasets into one stacked dataset  bldr_stacked <- rbindlist(list(bldr_ce, bldr_re))  bldr_stacked[, `:=`(pyridoxine = as.numeric(treatment == \"pyridoxine\"),                     thiotepa   = as.numeric(treatment == \"thiotepa\"))]  bldr_stacked$stop[bldr_stacked$stop == 0] <- 1 # Add one day survival   # Print stacked dataset head(bldr_stacked) id treatment start stop status ce re event pyridoxine thiotepa 1:  1   placebo     0    1      3  1  0     1          0        0 2:  2   placebo     0    1      3  1  0     1          0        0 3:  3   placebo     0    4      0  1  0     0          0        0 4:  4   placebo     0    7      0  1  0     0          0        0 5:  5   placebo     0   10      3  1  0     1          0        0 6:  6   placebo     0   10      3  1  0     1          0        0 bldr_model <- JointFPM(Surv(time  = start,                             time2 = stop,                              event = event,                             type  = 'counting') ~ 1,                        re_model = ~ pyridoxine + thiotepa,                        ce_model = ~ pyridoxine + thiotepa,                        re_indicator = \"re\",                        ce_indicator = \"ce\",                        df_ce = 3,                        df_re = 3,                        tvc_ce_terms = list(pyridoxine = 2,                                            thiotepa   = 2),                        tvc_re_terms = list(pyridoxine = 2,                                            thiotepa   = 2),                        cluster  = \"id\",                        data     = bldr_stacked) predict(bldr_model,         newdata = data.frame(pyridoxine = 1,                               thiotepa   = 0),         t =  c(10, 20, 50)) stop       fit       lci       uci 1   10 0.6068153 0.2866777 0.9269528 2   20 1.1156503 0.5334427 1.6978580 3   50 2.3789320 1.0343114 3.7235525"},{"path":"https://entjos.github.io/JointFPM/index.html","id":"bugs","dir":"","previous_headings":"","what":"Bugs","title":"A Parametric Model for Estimating the Mean Number of Events","text":"find bugs suggestion please don’t hesitate file issue GitHub.","code":""},{"path":"https://entjos.github.io/JointFPM/reference/JointFPM-package.html","id":null,"dir":"Reference","previous_headings":"","what":"JointFPM: A Parametric Model for Estimating the Mean Number of Events — JointFPM-package","title":"JointFPM: A Parametric Model for Estimating the Mean Number of Events — JointFPM-package","text":"Implementation parametric joint model modelling recurrent competing event processes using generalised survival models. joint model can subsequently used predict mean number events presence competing risks different time points. Comparisons mean number event functions, e.g. differences mean number events two exposure groups, also available.","code":""},{"path":[]},{"path":"https://entjos.github.io/JointFPM/reference/JointFPM-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"JointFPM: A Parametric Model for Estimating the Mean Number of Events — JointFPM-package","text":"Maintainer: Joshua P. Entrop joshuaentrop@posteo.de (ORCID) [copyright holder] contributors: Alessandro Gasparini [contributor] Mark Clements [contributor]","code":""},{"path":"https://entjos.github.io/JointFPM/reference/JointFPM.html","id":null,"dir":"Reference","previous_headings":"","what":"Joint FPMs for recurrent and competing events. — JointFPM","title":"Joint FPMs for recurrent and competing events. — JointFPM","text":"Fits joint flexible parametric survival model (FPM) recurrent terminal event. joint model can used predict mean number events different time points. function wrapper around rstpm2::stpm2().","code":""},{"path":"https://entjos.github.io/JointFPM/reference/JointFPM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Joint FPMs for recurrent and competing events. — JointFPM","text":"","code":"JointFPM(   surv,   re_model,   ce_model,   re_indicator,   ce_indicator,   df_ce = 3,   df_re = 3,   tvc_re_terms = NULL,   tvc_ce_terms = NULL,   cluster,   data )"},{"path":"https://entjos.github.io/JointFPM/reference/JointFPM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Joint FPMs for recurrent and competing events. — JointFPM","text":"surv formula following form Surv(...) ~ 1. Surv objects needs type ==  'counting' following arguments: time: Start follow-time event episode, .e., usually 0 competing event first occurrence recurrent event. every subsequent event follow-can either 0 gap time underlying time scale time previous event total time underlying time scale. time2: End follow-, .e., either occurrence terminal recurrent event, time censoring. status: Event indicator terminal recurrent event. type: counting. re_model formula object specifying model recurrent event empty right hand side formula, e.g. ~ sex. ce_model formula object specifying model competing event empty right hand side formula, e.g. ~ sex. re_indicator Indicator defines rows dataset belong recurrent event process. usually one row per observations. variable name needs passed character vector. ce_indicator Indicator defines row dataset belong competing event process. variable name needs passed character vector. df_ce Defines number knots used model baseline hazard function competing event process. df_re Defines number knots used model baseline hazard function recurrent event process. tvc_re_terms named list defining number knots used model potential time-varying effects variables included recurrent event model. list form list(<var_name> = <. knots>). tvc_ce_terms named list defining number knots used model potential time-varying effects variables included competing event model. list form list(<var_name> = <. knots>). cluster character vector specifying name variable defines unique observations dataset passed function. data stacked dataset includes data recurrent competing event process. dataset one row observation including follow-time event indicator competing event possibly multiple rows observation including follow-times event indicator recurrent event, e.g.:","code":"id st_start  st_end re status  1      0      6.88  0      1  1      0      6.88  1      0  2      0      8.70  0      1  2      0      8.70  1      0  3      0     10     0      0  3      0      1.78  1      1  3      1.78   6.08  1      1  3      6.08  10     1      0  4      0      6.07  0      1  4      0      6.07  1      0"},{"path":"https://entjos.github.io/JointFPM/reference/JointFPM.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Joint FPMs for recurrent and competing events. — JointFPM","text":"object class JointFPM following elements: model: fitted FPM object, re_terms: terms used model recurrent event model, ce_terms: terms used model competing event model, re_indicator: name indicator variable recurrent event","code":""},{"path":"https://entjos.github.io/JointFPM/reference/JointFPM.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Joint FPMs for recurrent and competing events. — JointFPM","text":"","code":"JointFPM(Surv(time  = start,               time2 = stop,               event = event,               type  = 'counting') ~ 1,          re_model = ~ pyridoxine + thiotepa,          ce_model = ~ pyridoxine + thiotepa,          re_indicator = \"re\",          ce_indicator = \"ce\",          df_ce = 3,          df_re = 3,          tvc_ce_terms = list(pyridoxine = 2,                              thiotepa   = 2),          tvc_re_terms = list(pyridoxine = 2,                              thiotepa   = 2),          cluster  = \"id\",          data     = bladder1_stacked) #> $model #>  #> Call: #> rstpm2::stpm2(formula = model_formula, data = data, df = df_ce,  #>     smooth.formula = bh_formula, tvc.formula = tvc_formula, cluster = data[[cluster]],  #>     robust = TRUE) #>  #> Coefficients: #>                               ce                               re  #>                      -4.26119784                      -3.88216765  #>                    ce:pyridoxine                      ce:thiotepa  #>                      -0.59655478                      -0.59900162  #>                    re:pyridoxine                      re:thiotepa  #>                       0.16089523                       0.87325227  #>            ce:nsx(log(stop), 3)1            ce:nsx(log(stop), 3)2  #>                       2.00351423                       4.30723633  #>            ce:nsx(log(stop), 3)3            re:nsx(log(stop), 3)1  #>                       2.72222971                       3.31873438  #>            re:nsx(log(stop), 3)2            re:nsx(log(stop), 3)3  #>                       7.52378236                       3.28524605  #> ce:pyridoxine:nsx(log(stop), 2)1 ce:pyridoxine:nsx(log(stop), 2)2  #>                       1.44889533                      -0.26834877  #>   ce:thiotepa:nsx(log(stop), 2)1   ce:thiotepa:nsx(log(stop), 2)2  #>                       0.90885411                       1.05531401  #> re:pyridoxine:nsx(log(stop), 2)1 re:pyridoxine:nsx(log(stop), 2)2  #>                      -0.23787432                      -0.08296329  #>   re:thiotepa:nsx(log(stop), 2)1   re:thiotepa:nsx(log(stop), 2)2  #>                      -2.34781263                      -0.42711985  #>  #> Log-likelihood: -913.15  #>  #> $re_indicator #> [1] \"re\" #>  #> $ce_indicator #> [1] \"ce\" #>  #> attr(,\"class\") #> [1] \"JointFPM\""},{"path":"https://entjos.github.io/JointFPM/reference/bladder1_stacked.html","id":null,"dir":"Reference","previous_headings":"","what":"Stacked version of the bladder1 dataset included in the survival package — bladder1_stacked","title":"Stacked version of the bladder1 dataset included in the survival package — bladder1_stacked","text":"dataset includes bladder1 dataset included survival package, transformed stacked format use JointFPM. stacked datset includes one row per individual competing event one rows per individual reoccurrence bladder cancer.","code":""},{"path":"https://entjos.github.io/JointFPM/reference/bladder1_stacked.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stacked version of the bladder1 dataset included in the survival package — bladder1_stacked","text":"","code":"bladder1_stacked data(bladder1_stacked)"},{"path":"https://entjos.github.io/JointFPM/reference/bladder1_stacked.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Stacked version of the bladder1 dataset included in the survival package — bladder1_stacked","text":"data frame 412 rows 10 columns","code":""},{"path":"https://entjos.github.io/JointFPM/reference/bladder1_stacked.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Stacked version of the bladder1 dataset included in the survival package — bladder1_stacked","text":"information please take look ?survival::bladder.","code":""},{"path":[]},{"path":"https://entjos.github.io/JointFPM/reference/mean_no.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Non-parametric estimation of mean number of events — mean_no","text":"","code":"mean_no(   formula,   re_indicator,   ce_indicator,   data,   re_control = list(),   ce_control = list() )"},{"path":"https://entjos.github.io/JointFPM/reference/mean_no.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Non-parametric estimation of mean number of events — mean_no","text":"formula formula passed survfit. re_indicator name variable indicating rows dataset belong risksets recurrent event process. ce_indicator name variable indicating rows datasets belong riskset competing event process. data data.frame stacked format. dataset needs include one row competing event one row risk episode recurrent event. re_control optional list arguments passed survfit computing risksets recurrent event. ce_control optional list arguments passed survfit computing risksets competing event.","code":""},{"path":"https://entjos.github.io/JointFPM/reference/mean_no.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Non-parametric estimation of mean number of events — mean_no","text":"data.frame including estimated mean number events expn times t within strata strata.","code":""},{"path":"https://entjos.github.io/JointFPM/reference/predict.JointFPM.html","id":null,"dir":"Reference","previous_headings":"","what":"Post-estimation function for JointFPMs — predict.JointFPM","title":"Post-estimation function for JointFPMs — predict.JointFPM","text":"Predicts different estimates joint flexible parametric model. Currently estimation mean number events different time points supported.","code":""},{"path":"https://entjos.github.io/JointFPM/reference/predict.JointFPM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Post-estimation function for JointFPMs — predict.JointFPM","text":"","code":"# S3 method for JointFPM predict(object, type = \"mean_no\", newdata, t, exposed, ci_fit = TRUE, ...)"},{"path":"https://entjos.github.io/JointFPM/reference/predict.JointFPM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Post-estimation function for JointFPMs — predict.JointFPM","text":"object joint flexible parametric model class JointFPM. type character vector defining estimate interest. Currently available options : mean_no: Estimates mean number events time(s) t. diff: Estimates difference mean number events exposed unexposed time(s) t. newdata data.frame including variable values used prediction. One value variable used either recurrent competing event model required. t vector defining time points used prediction. exposed function takes newdata argument creates new dataset exposed group. argument required type = 'diff'. Please see details information. ci_fit Logical indicator whether confidence intervals estimated fitted estimates using delta method. ... Added compatibility predict functions.","code":""},{"path":"https://entjos.github.io/JointFPM/reference/predict.JointFPM.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Post-estimation function for JointFPMs — predict.JointFPM","text":"data.frame following columns: t: time prediction, fit: point estimate prediction, lci: lower confidence interval limit, uci: upper confidence interval limit.","code":""},{"path":"https://entjos.github.io/JointFPM/reference/predict.JointFPM.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Post-estimation function for JointFPMs — predict.JointFPM","text":"function required exposed argument must take newdata dataset argument transform new dataset defines exposed group. Assume assume model one variable trt 0/1 coded treatment indicator. like obtain difference mean number events comparing untreated treated group use following function assuming newdata = data.frame(trt = 0):","code":"function(x){transform(x, trt = 1)}"},{"path":"https://entjos.github.io/JointFPM/reference/predict.JointFPM.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Post-estimation function for JointFPMs — predict.JointFPM","text":"","code":"bldr_model <- JointFPM(Surv(time  = start,                             time2 = stop,                             event = event,                             type  = 'counting') ~ 1,                        re_model = ~ pyridoxine + thiotepa,                        ce_model = ~ pyridoxine + thiotepa,                        re_indicator = \"re\",                        ce_indicator = \"ce\",                        df_ce = 3,                        df_re = 3,                        cluster  = \"id\",                        data     = bladder1_stacked)  predict(bldr_model,         newdata = data.frame(pyridoxine = 1,                              thiotepa   = 0),         t       =  c(10, 20),         ci_fit  = FALSE) #> Registered S3 method overwritten by 'rmutil': #>   method         from #>   print.response httr #>   stop       fit #> 1   10 0.6100286 #> 2   20 1.1260768"},{"path":"https://entjos.github.io/JointFPM/reference/test_dfs_JointFPM.html","id":null,"dir":"Reference","previous_headings":"","what":"Tests DFs for JointFPMs. — test_dfs_JointFPM","title":"Tests DFs for JointFPMs. — test_dfs_JointFPM","text":"Test different degrees freedoms (DFs) joint flexible parametric survival models.","code":""},{"path":"https://entjos.github.io/JointFPM/reference/test_dfs_JointFPM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tests DFs for JointFPMs. — test_dfs_JointFPM","text":"","code":"test_dfs_JointFPM(   surv,   re_model,   ce_model,   re_indicator,   ce_indicator,   dfs_ce,   dfs_re,   tvc_re_terms = NULL,   tvc_ce_terms = NULL,   cluster,   data )"},{"path":"https://entjos.github.io/JointFPM/reference/test_dfs_JointFPM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tests DFs for JointFPMs. — test_dfs_JointFPM","text":"surv formula following form Surv(...) ~ 1. Surv objects needs type ==  'counting' following arguments: time: Start follow-time event episode, .e., usually 0 competing event first occurrence recurrent event. every subsequent event follow-can either 0 gap time underlying time scale time previous event total time underlying time scale. time2: End follow-, .e., either occurrence terminal recurrent event, time censoring. status: Event indicator terminal recurrent event. type: counting. re_model formula object specifying model recurrent event empty right hand side formula, e.g. ~ sex. ce_model formula object specifying model competing event empty right hand side formula, e.g. ~ sex. re_indicator Indicator defined rows dataset belong recurrent event process. usually one row per observations. variable name needs passed character vector. ce_indicator Indicator defined row dataset belong competing event process. variable name needs passed character vector. dfs_ce Defines number knots used model baseline hazard function competing event process. dfs_re Defines number knots used model baseline hazard function recurrent event process. tvc_re_terms named list defining numbers knots used model potential time-varying effects variables included recurrent event model. list form list(<var_name> = <. knots>). tvc_ce_terms named list defining numbers knots used model potential time-varying effects variables included competing event model. list form list(<var_name> = <. knots>). cluster chara vector specifying name variable defines unique observation dataset passed function. data stacked dataset including data recurrent competing event process. dataset one row observation including follow-time event indicator competing event possibly multiple rows observation including follow-times event indicator recurrent event, e.g.:","code":"id st_start  st_end re status  1      0      6.88  0      1  1      0      6.88  1      0  2      0      8.70  0      1  2      0      8.70  1      0  3      0     10     0      0  3      0      1.78  1      1  3      1.78   6.08  1      1  3      6.08  10     1      0  4      0      6.07  0      1  4      0      6.07  1      0"},{"path":"https://entjos.github.io/JointFPM/reference/test_dfs_JointFPM.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tests DFs for JointFPMs. — test_dfs_JointFPM","text":"data.frame one row per combination baseline hazards DFs, DFs time varying covariates, corresponding AIC BIC.","code":""},{"path":"https://entjos.github.io/JointFPM/reference/test_dfs_JointFPM.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tests DFs for JointFPMs. — test_dfs_JointFPM","text":"","code":"# Test different dfs test_dfs_JointFPM(Surv(time  = start,                        time2 = stop,                        event = event,                        type  = 'counting') ~ 1,                   re_model = ~ pyridoxine + thiotepa,                   ce_model = ~ pyridoxine + thiotepa,                   re_indicator = \"re\",                   ce_indicator = \"ce\",                   dfs_ce = 1:3,                   dfs_re = 2,                   tvc_ce_terms = list(thiotepa   = 1:2),                   tvc_re_terms = list(pyridoxine = 2),                   cluster  = \"id\",                   data     = bladder1_stacked) #>   df_ce df_re df_ce_thiotepa df_re_pyridoxine      AIC      BIC #> 1     1     2              1                2 1855.761 1904.013 #> 2     2     2              1                2 1857.316 1909.590 #> 3     3     2              1                2 1859.121 1915.415 #> 4     1     2              2                2 1856.842 1909.115 #> 5     2     2              2                2 1858.763 1915.057 #> 6     3     2              2                2 1860.577 1920.893"},{"path":[]},{"path":"https://entjos.github.io/JointFPM/news/index.html","id":"version-100","dir":"Changelog","previous_headings":"","what":"Version 1.0.0","title":"Version 1.0.0","text":"CRAN release: 2023-09-23 First stable release","code":""}]
